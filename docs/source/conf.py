# -- Imports -----------------------------------------------------------------

import os
import sys
from re import match
from datetime import date
from semantic_version import Version
from configparser import ConfigParser
from sphinx_bootstrap_theme import get_html_theme_path

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))
docssrc_dir = os.path.abspath(os.path.join(__file__, '..'))
project_dir = os.path.dirname(os.path.dirname(docssrc_dir))
sys.path.insert(0, project_dir)

# -- Project information -----------------------------------------------------

import mod_nest_exp

project = mod_nest_exp.__name__
author = match('(.*) <.*>', mod_nest_exp.__author__).group(1)
copyright = f'2020-{date.today().year}, {author}'

semver = Version.coerce(mod_nest_exp.__version__)
version = '{v.major}.{v.minor}.{v.patch}'.format(v=semver)

# The full version, including alpha/beta/rc tags
release = str(semver)

# Project URLs
_parser = ConfigParser()
_parser.read(os.path.join(project_dir, 'setup.cfg'))
project_urls = dict(map(str.strip, line.split(' = ', 1)) for line in _parser.get('metadata', 'project_urls').splitlines() if line.strip())

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.doctest',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.viewcode',
    'sphinx_bootstrap_theme',
    'nbsphinx',
    'recommonmark',
    'IPython.sphinxext.ipython_console_highlighting'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build']

pygments_style = 'solarized-dark'

default_role = 'py:obj'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'bootstrap'

html_theme_path = get_html_theme_path()

html_theme_options = {
    'bootswatch_theme': 'darkly',
    # Choose Bootstrap version.
    'bootstrap_version': '4',
    # Tab name for entire site. (Default: "Site")
    'navbar_site_name': 'Documentation',
    # HTML navbar class (Default: "navbar") to attach to <div> element.
    # For black navbar, do "navbar navbar-inverse"
    'navbar_class': 'navbar',
    # Render the next and previous page links in navbar. (Default: true)
    'navbar_sidebarrel': True,
    # Render the current pages TOC in the navbar. (Default: true)
    'navbar_pagenav': False,
    # A list of tuples containing pages or urls to link to.
    'navbar_links': [
        ('GitHub', _parser.get('metadata', 'url').strip(), True),
        ('CI', project_urls['CI'], True)
    ]
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

html_sidebars = {
    '*': ['localtoc.html']
}

htmlhelp_basename = mod_nest_exp.__name__

imgmath_image_format = 'svg'

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for recommonmark extension --------------------------------------

source_suffix = {
    '.rst': 'restructuredtext',
    '.txt': 'markdown',
    '.md': 'markdown',
}


# -- Options for nbsphinx extension ------------------------------------------

nbsphinx_execute = 'auto'